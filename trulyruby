=begin
# Temp 1

'underpants'.length

# Temp 2

class MyClass
  #Methods and Attributes
end

# Temp 3

my_instance = MyClass.new

# Temp 4

class PowerRanger
  def initialize(animal, color)
    @animal = animal
    @color = color
  end
end

# Temp 5

kimberly = PowerRanger.new('Pterodactyl', 'pink')

# Temp 6

class Car
  @@cars_sold = 0
  def initialize(make, model)
    @make = make
    @model = model
    @@cars_sold += 1
  end
end

# Temp 7

class Car
  $manufacturer = 'Toyota'
  @@cars_sold = 0
  def initialize(model, year)
    @model = model
    @year = year
    @@cars_sold += 1
  end
end


# Temp 8

class Sedan < Car
end

# Temp 9

module MyModule
  MY_CONSTANT = 0
end
=end
# Temp A

module Action
  def whistle
    puts "Come forth! March to the Capitol!"
  end
end

class Mockingjay
  include Action
  attr_reader :color
  def initialize(district)
    @district = district
  end
end

katniss = Mockingjay.new(12)

katniss.whistle

# Temp B Java Example
=begin
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;

public class Merge{
  public static <E extends Comparable<? super E>> List<E> mergeSort(List<E> m){
    if(m.size() <= 1) return m;

    int middle = m.size() / 2;
    List<E> left = m.subList(0, middle);
    List<E> right = m.subList(middle, m.size());

    right = mergeSort(right);
    left = mergeSort(left);
    List<E> result = merge(left, right);

    return result;
    }

    public static <E extends Comparable<? super E>> List<E> merge(List<E> left, List<E> right){
      List<E> result = new ArrayList<E>();
      Iterator<E> it1 = left.iterator();
      Iterator<E> it2 = right.iterator();

      E x = it1.next();
      E y = it2.next();
      while (true){
          //change the direction of this comparison to change the direction of the sort
      if(x.compareTo(y) <= 0){
          result.add(x);
      if(it1.hasNext()){
          x = it1.next();
      }else{
          result.add(y);
      while(it2.hasNext()){
          result.add(it2.next());
      }
      break;
      }
      }else{
          result.add(y);
      if(it2.hasNext()){
          y = it2.next();
      }else{
          result.add(x);
      while (it1.hasNext()){
          result.add(it1.next());
      }
      break;
      }
      }
      }
      return result;
      }
      }
=end
# Temp C

def merge_sort(m)
  return m if m.length <= 1

  middle = m.length / 2
  left = merge_sort(m[0...middle])
  right = merge_sort(m[middle..-1])
  merge(left, right)
end

def merge(left, right)
  result = []
  until left.empty? || right.empty?
    result << (left.first <= right.first ? left.shift : right.shift)
  end
  result + left + right
end

# Temp D

def create_record(attributes, raise_error = false)
  record = build_record(attributes)
  yield(record) if block_given?
  saved = record.save
  set_new_record(record)
  raise RecordInvalid.new(record) if !saved && raise_error
  record
end

